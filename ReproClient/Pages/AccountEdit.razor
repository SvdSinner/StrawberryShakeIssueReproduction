@page "/AccountEdit"
@using System.Diagnostics
@using James.Shared.Model
@using StrawberryShake
@inject IAccountClient accountClient;
@inject DialogService dialogService;

<h1>Account Editor</h1>
@if (null != accountNumbers)
{
    <span>
        Type an account number:&nbsp;&nbsp;
        <RadzenAutoComplete Value=@accountNumber
                            Change=@OnAcctNumChange
                            Data=@accountNumbers
                            @rendermode="@RenderMode.InteractiveWebAssembly"></RadzenAutoComplete>
    </span>
}
else
{
    <p>Loading. . . </p>
}
<UseGetAccountByAccountNumber Context="acctDetails" AccountNum=@queryAccountNumber Strategy="ExecutionStrategy.CacheFirst">
    <ChildContent>
        <RadzenCard>
            <RadzenRow>
                <RadzenColumn>Account Number Sent</RadzenColumn>
                <RadzenColumn>@accountNumber</RadzenColumn>
                </RadzenRow>
                @if (acctDetails?.Account != null)
            {
                accountFromServer = acctDetails.Account;
                account ??= ThisToThat.ToEntityType<Account>(acctDetails.Account);
                <RadzenRow>
                    <RadzenColumn>Account Number Returned</RadzenColumn>
                    <RadzenColumn>@account.AccountNum</RadzenColumn>
                    </RadzenRow>
                <RadzenRow>
                    <RadzenColumn>Bank</RadzenColumn>
                    <RadzenColumn><RadzenTextBox @bind-Value=@account.Bank></RadzenTextBox></RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn>Division</RadzenColumn>
                    <RadzenColumn>@account.Division</RadzenColumn>
                    </RadzenRow>
                <RadzenRow>
                    <RadzenColumn>Branch Approved By</RadzenColumn>
                    <RadzenColumn>@account.HomeOfficeReviewByNavigation?.FullName</RadzenColumn>
                    </RadzenRow>
                <RadzenRow>
                    <RadzenColumn>City</RadzenColumn>
                    <RadzenColumn>@(account.IdNavigation?.LegalEntityAddresses?.FirstOrDefault(a => a.Type == "Main").Address.City ?? "")</RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn>State</RadzenColumn>
                    <RadzenColumn>@(account.IdNavigation?.LegalEntityAddresses?.FirstOrDefault(a => a.Type == "Main").Address.StateCode ?? "")</RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn>
                        <RadzenButton Click=@(()=>SaveAccountBank(account))>Save</RadzenButton>
                    </RadzenColumn>
                </RadzenRow>
            }
            else
            {
                @(account = null)
            }
        </RadzenCard>
    </ChildContent>
    <ErrorContent>
        @{
            var errorMessage = acctDetails?.First().Message ?? "";
            if (!errorMessage.Contains("No account exists with accountNumber"))
            {
                <text>
                    <br />
                    Something went wrong ...
                    <br />
                    @errorMessage
                </text>
            }
        }
    </ErrorContent>
    <LoadingContent>
        Loading ...
    </LoadingContent>
</UseGetAccountByAccountNumber>
<RadzenComponents />

@code {
    string accountNumber = "", queryAccountNumber = "";//, errorMessage = "";
    IDisposable session;
    IEnumerable<string> accountNumbers;
    IGetAccountByAccountNumber_Account accountFromServer;
    Account? account;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var result = await accountClient.GetAccountNumbers.ExecuteAsync("", true);
        accountNumbers = result.Data.FilteredAccountNumbers ?? Array.Empty<string>();
        await Task.Delay(3000);
        session = accountClient.AccountModified.Watch().Subscribe(  a=>  AccountModified(a).RunSynchronously());
    }

    private async Task AccountModified(IOperationResult<IAccountModifiedResult> operationResult)
    {
        if (operationResult.Errors.Any())
            throw new Exception(operationResult.Errors.First().Message);
        if (operationResult.Data is null)
            throw new ArgumentNullException(nameof(operationResult.Data), "No data was returned from the subscription.");
        if (accountFromServer.AccountNum != account?.AccountNum) 
            //Ignore if not related to the account being editted.
            return;
        Debug.Assert(null != account);
        if (account.Bank == operationResult.Data.OnAccountModified.Bank)
            //Ignore if user's edit value matches the updated value.
            return;
        if (accountFromServer.Bank == account.Bank)
        //If user hasn't changed the value, simply take the new value
        {
            account.Bank = operationResult.Data.OnAccountModified.Bank;
        }
        else
        {
            //Messagebox to ask user which value to keep.
            var result = await dialogService.OpenAsync("Warning Data Has Changed", ds =>
                @<RadzenStack Gap="1.5rem">
                    <p>Data that you have editted has changed on the server.</p>
                    <RadzenRow>
                        <RadzenColumn>Field changed:</RadzenColumn>
                        <RadzenColumn>Bank</RadzenColumn>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenColumn>Original Value:</RadzenColumn>
                        <RadzenColumn>@accountFromServer.Bank</RadzenColumn>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenColumn>New Server Value:</RadzenColumn>
                        <RadzenColumn>@operationResult.Data.OnAccountModified.Bank</RadzenColumn>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenColumn>Your Edited Value:</RadzenColumn>
                        <RadzenColumn>@account.Bank</RadzenColumn>
                    </RadzenRow>
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenButton Text="Keep Server Value" Click="() => ds.Close(true)" Style="width: 80px;"/>
                            <RadzenButton Text="Keep your own edits" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light"/>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenStack>);
            if (result == true) 
                account.Bank = operationResult.Data.OnAccountModified.Bank;
        }
    }

    void OnAcctNumChange(dynamic args)
    {
        //TODO: Requery with filter.
        queryAccountNumber = accountNumber = args;
        if (accountNumber != account?.AccountNum)
            account = null;
    }
    
    private void SaveAccountBank(Account acct)
    {
        if (acct.Bank == null)
            throw new ArgumentNullException("Bank");
        accountClient.ChangeBank.ExecuteAsync(new UpdateBankInput { AccountNum = accountNumber, Bank = acct.Bank });
    }

}
